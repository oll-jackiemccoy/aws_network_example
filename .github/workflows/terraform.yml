name: Terraform CI/CD

on:
  push:
    branches:
      - main # Trigger on pushes to the main branch
  pull_request:
    branches:
      - main # Trigger on pull requests targeting the main branch

env:
  TF_LOG: INFO # Enable Terraform logging for debugging
  TF_INPUT: false # Disable interactive prompts

jobs:
  terraform:
    runs-on: ubuntu-latest # Use a fresh Ubuntu runner
    defaults:
      run:
        shell: bash # Ensure bash is used for all commands
        working-directory: ./terraform # Set the working directory for Terraform files

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4 # Checkout the repository code

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3 # Install the Terraform CLI
        with:
          terraform_version: 1.x.x # Specify your desired Terraform version

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check # Check Terraform code formatting

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color # Validate Terraform configuration syntax

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request' # Only run plan on pull requests
        run: terraform plan -no-color -out=tfplan # Generate a Terraform plan and save it

      - name: Terraform Apply
        id: apply
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' # Only apply on pushes to main
        run: terraform apply -auto-approve tfplan # Apply the Terraform plan

      # Example of commenting the plan in a PR
      - name: Comment Terraform Plan on PR
        if: github.event_name == 'pull_request' && success()
        uses: actions/github-script@v6
        with:
          script: |
            const planOutput = await github.actions.artifacts.downloadArtifact({
              name: 'tfplan',
              path: '.',
            });
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `Terraform Plan:\n\`\`\`\n${planOutput}\n\`\`\``,
            });
